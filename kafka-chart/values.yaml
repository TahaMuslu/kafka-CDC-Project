# values.yaml
# Default values for kafka-chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}


zookeeper:
  image: confluentinc/cp-zookeeper:5.5.0
  container_name: zookeeper
  environment:
    ZOOKEEPER_CLIENT_PORT: 2181
    ZOOKEEPER_TICK_TIME: 2000

kafka:
  image: confluentinc/cp-kafka:5.5.0
  container_name: kafka-1
  depends_on:
    - zookeeper
  ports:
    - 9092:9092
  healthcheck:
    test: "/usr/bin/kafka-topics --list --zookeeper zookeeper:2181"
  environment:
    KAFKA_BROKER_ID: 1
    KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:9092
    KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
    KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

kafdrop:
  image: obsidiandynamics/kafdrop:latest
  container_name: kafdrop
  depends_on:
    - kafka-1
  ports:
    - 9000:9000
  environment:
    KAFKA_BROKERCONNECT: kafka-1:9092
    SERVER_SERVLET_CONTEXTPATH: "/"

kafka-topics:
  image: confluentinc/cp-kafka:5.5.0
  container_name: kafka-topics
  depends_on:
    kafka-1:
      condition: service_healthy
  command: "bash -c 'echo creating topics && \
    kafka-topics --bootstrap-server kafka-1:9092 --create --topic X --partitions 1 --replication-factor 3'"

producer:
  build: producer
  container_name: producer
  depends_on:
    - kafka-topics
  volumes:
    - "./producer/producer.py:/kafkarun.py"
  environment:
    KAFKA_BROKERCONNECT: kafka-1:9092
    MONGODB_DB: kafka-deneme
    MONGODB_C: taha1216
    TOPIC: X
    MONGO_INITDB_ROOT_USERNAME: root
    MONGO_INITDB_ROOT_PASSWORD: example

consumer1:
  build: consumer
  container_name: consumer1
  depends_on:
    - kafka-topics
  volumes:
    - "./consumer/consumer.py:/kafkarun.py"
  environment:
    KAFKA_BROKERCONNECT: kafka-1:9092
    TOPIC: X
    CONSUMER_ID: 1

consumer2:
  build: consumer
  container_name: consumer2
  depends_on:
    - kafka-topics
  volumes:
    - "./consumer/consumer.py:/kafkarun.py"
  environment:
    KAFKA_BROKERCONNECT: kafka-1:9092
    TOPIC: X
    CONSUMER_ID: 2

consumer3:
  build: consumer
  container_name: consumer3
  depends_on:
    - kafka-topics
  volumes:
    - "./consumer/consumer.py:/kafkarun.py"
  environment:
    KAFKA_BROKERCONNECT: kafka-1:9092
    TOPIC: X
    CONSUMER_ID: 3

mongo:
  image: mongo:latest
  restart: always
  volumes:
    - mongodb-data:/data/db
    - mongodb-config:/data/configdb
  environment:
    MONGO_INITDB_ROOT_USERNAME: root
    MONGO_INITDB_ROOT_PASSWORD: example
    MONGO_INITDB_DATABASE: kafka-deneme
  ports:
    - 27020:27017
  container_name: "mongo"

volumes:
  mongodb-data:
    driver: local
  mongodb-config:
    driver: local
