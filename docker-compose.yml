services:

  zookeeper:
    image: confluentinc/cp-zookeeper:5.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka-1:
    image: confluentinc/cp-kafka:5.5.0
    container_name: kafka-1
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    healthcheck:
      test: "/usr/bin/kafka-topics --list --zookeeper zookeeper:2181"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  
  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafdrop
    depends_on:
      - kafka-1
    ports:
      - 9000:9000
    environment:
      KAFKA_BROKERCONNECT: kafka-1:9092
      SERVER_SERVLET_CONTEXTPATH: "/"

  kafka-topics:
    image: confluentinc/cp-kafka:5.5.0
    container_name: kafka-topics
    depends_on:
      kafka-1:
        condition: service_healthy
    command: "bash -c 'echo creating topics && \
      kafka-topics --bootstrap-server kafka-1:9092 --create --topic X --partitions 1 --replication-factor 3'"

  producer:
    build: producer
    container_name: producer
    depends_on:
      - kafka-topics
      - mongo
    volumes:
      - ./producer/producer.py:/kafkarun.py
    environment:
      KAFKA_BROKERCONNECT: kafka-1:9092
      MONGODB_DB: kafka-deneme
      MONGODB_C: taha1216
      TOPIC: X

  consumer1:
    build: consumer
    container_name: consumer1
    depends_on:
      - kafka-topics
    volumes:
      - ./consumer/consumer.py:/kafkarun.py
    environment:
      KAFKA_BROKERCONNECT: kafka-1:9092
      TOPIC: X
      CONSUMER_ID: 1

  consumer2:
    build: consumer
    container_name: consumer2
    depends_on:
      - kafka-topics
    volumes:
      - ./consumer/consumer.py:/kafkarun.py
    environment:
      KAFKA_BROKERCONNECT: kafka-1:9092
      TOPIC: X
      CONSUMER_ID: 2

  consumer3:
    build: consumer
    container_name: consumer3
    depends_on:
      - kafka-topics
    volumes:
      - ./consumer/consumer.py:/kafkarun.py
    environment:
      KAFKA_BROKERCONNECT: kafka-1:9092
      TOPIC: X
      CONSUMER_ID: 3
  
  mongo:
    image: mongo:latest
    depends_on:
      - m1
      - m2
    restart: always
    command: 
    - mongod --replSet mongoSet
    - mongosh --eval "config = {_id:\"mongoSet\",members:[{_id:0,host:\"mongo:27017\"},{_id:1,host:\"m1:27017\"},{_id:2,host:\"m2:27017\"}]}"
    - mongosh --eval "rs.initiate(config);"
    # command: bash -c 'mongod --replSet mongoSet && mongosh --eval "config = {_id:\"mongoSet\",members:[{_id:0,host:\"mongo:27017\"},{_id:1,host:\"m1:27017\"},{_id:2,host:\"m2:27017\"}]}"  && mongosh --eval "rs.initiate(config);"'
    ports:
      - 27020:27017
    container_name: "mongo"

  m1:
    image: mongo:latest
    restart: always
    command: mongod --replSet mongoSet
    ports:
      - 27021:27017
    container_name: "m1"

  m2:
    image: mongo:latest
    restart: always
    command: mongod --replSet mongoSet
    ports:
      - 27022:27017
    container_name: "m2"

  kafkadeneme:
    build: deneme-site
    container_name: kafkadeneme
    ports:
      - 8000:8000
    depends_on:
      - kafka-topics
      - mongo
      - producer
    volumes:
      - ./deneme-site/deneme-site.py:/deneme-site.py
      - ./deneme-site/index.html:/index.html
    environment:
      MONGODB_DB: kafka-deneme
      MONGODB_C: taha1216
      PORT: 8000

volumes:
  mongodb-data:
    driver: local
  mongodb-config:
    driver: local
  
